<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <base href="{{basePath}}">
    <title>Venue Details - {{.Venue.Venue.Name}}</title>
    {{template "global_header_style" .}}
    <style>
        :root {
            --bg: #f4f5f7;
            --card-bg: #ffffff;
            --border: #e0e6ed;
            --text: #1f2933;
            --muted: #6b7b8a;
            --accent: #2c7be5;
            --accent-soft: #ecf3ff;
            --danger: #d64545;
            --success: #1f8a4c;
            --shadow: 0 1px 2px rgba(15, 23, 42, 0.08);
        }
        *, *::before, *::after { box-sizing: border-box; }
        body { margin: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: var(--bg); color: var(--text); line-height: 1.5; }
        h1, h2, h3, h4, h5, h6 { margin: 0; }
        p { margin: 0; }
        a { color: var(--accent); text-decoration: none; }
        a:hover { text-decoration: underline; }
        button { font-family: inherit; }
        .page-shell { max-width: 1200px; margin: 0 auto; padding: 32px 24px 64px; }
        .page-header { display: flex; justify-content: space-between; align-items: flex-start; gap: 24px; margin-bottom: 24px; }
        .page-title { font-size: 32px; font-weight: 600; }
        .page-meta { color: var(--muted); margin-top: 8px; font-size: 14px; }
        .detail-layout { display: grid; grid-template-columns: minmax(260px, 300px) 1fr; gap: 24px; align-items: flex-start; }
        .side-column, .main-column { display: flex; flex-direction: column; gap: 16px; }
        .card { background: var(--card-bg); border: 1px solid var(--border); border-radius: 12px; padding: 20px; box-shadow: var(--shadow); }
        .card h2, .card h3 { font-size: 18px; font-weight: 600; margin-bottom: 12px; }
        .status-pill { display: inline-flex; align-items: center; gap: 6px; padding: 6px 12px; border-radius: 999px; font-weight: 600; font-size: 14px; }
        .status-pill.approved { background: #e6f4ea; color: var(--success); }
        .status-pill.rejected { background: #fdecea; color: var(--danger); }
        .status-pill.pending { background: #fff5d1; color: #8a6d1f; }
        .status-note { margin-top: 16px; padding: 12px; border-radius: 10px; background: #fdecea; border: 1px solid #f3b8b8; color: #903939; font-size: 14px; }
        .action-form { margin-top: 20px; padding: 16px; border-radius: 12px; border: 1px dashed var(--border); background: var(--bg); }
        .action-buttons { display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 12px; }
        .review-action { margin-bottom: 24px; }
        .review-action-bar { display: flex; justify-content: space-between; align-items: center; gap: 12px; }
        .review-action-bar .btn { flex: 1 1 0; }
        .approval-reject-form { display: none; margin-top: 16px; }
        .approval-reject-form.is-visible { display: block; }
        .approval-reject-form .form-actions { display: flex; justify-content: flex-end; margin-top: 12px; }
        .btn { display: inline-flex; align-items: center; justify-content: center; gap: 6px; padding: 10px 16px; border-radius: 8px; border: none; cursor: pointer; font-weight: 600; font-size: 14px; }
        .btn-primary { background: var(--accent); color: #fff; }
        .btn-success { background: #34a853; color: #fff; }
        .btn-danger { background: #ea4335; color: #fff; }
        .btn-subtle { background: var(--card-bg); color: var(--accent); border: 1px solid var(--accent); }
        .btn.is-loading { cursor: progress; opacity: 0.85; }
        .btn .spinner { display: none; width: 16px; height: 16px; border-radius: 50%; border: 2px solid rgba(255,255,255,0.6); border-top-color: rgba(255,255,255,1); animation: spin 0.8s linear infinite; }
        .btn.is-loading .spinner { display: inline-block; }
        @keyframes spin { to { transform: rotate(360deg); } }
        .action-form textarea { width: 100%; padding: 10px; border: 1px solid var(--border); border-radius: 8px; resize: vertical; font-family: inherit; font-size: 14px; }
        .action-form label { color: var(--muted); font-size: 13px; font-weight: 600; display: block; margin-bottom: 6px; }
        .status-header { display: flex; justify-content: space-between; align-items: center; gap: 12px; margin-bottom: 16px; }
        .status-label { font-size: 13px; font-weight: 600; letter-spacing: 0.08em; color: var(--muted); text-transform: uppercase; }
        .status-meta { list-style: none; padding: 0; margin: 20px 0 0; display: flex; flex-direction: column; gap: 12px; font-size: 14px; }
        .status-meta li { display: flex; justify-content: space-between; align-items: baseline; gap: 12px; color: var(--muted); }
        .status-meta strong { color: var(--text); font-weight: 600; }
        details.details-card { background: var(--card-bg); border: 1px solid var(--border); border-radius: 12px; box-shadow: var(--shadow); overflow: hidden; }
        details.details-card summary { list-style: none; cursor: pointer; padding: 18px 20px; display: flex; align-items: center; justify-content: space-between; font-size: 18px; font-weight: 600; color: var(--text); }
        details.details-card summary::-webkit-details-marker { display: none; }
        details.details-card summary::after { content: '▾'; font-size: 16px; color: var(--muted); transition: transform 0.2s ease; }
        details.details-card[open] summary::after { transform: rotate(180deg); }
        details.details-card > .details-body { padding: 0 20px 20px; }
        .field-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); gap: 16px; }
        .field { display: flex; flex-direction: column; gap: 6px; font-size: 14px; }
        .field-label { color: var(--muted); font-weight: 600; text-transform: uppercase; letter-spacing: 0.04em; font-size: 12px; }
        .field-source { margin-left: 6px; font-size: 11px; color: var(--muted); font-weight: 500; text-transform: none; letter-spacing: normal; }
        .field-value { color: var(--text); }
        .badge { display: inline-flex; align-items: center; padding: 4px 10px; border-radius: 999px; background: var(--accent-soft); color: var(--accent); font-size: 12px; font-weight: 600; }
        .submitted-by { display: flex; flex-wrap: wrap; gap: 10px; align-items: center; }
        .submitted-name { font-weight: 600; color: var(--text); font-size: 15px; }
        .badge-trust { background: #e7f7ef; color: var(--success); }
        .callout { padding: 12px 14px; border-radius: 10px; border: 1px solid var(--border); background: var(--bg); font-size: 14px; }
        .callout.warning { border-color: #f1c16f; background: #fff7e6; color: #8a5a11; }
        .callout.success { border-color: #6bc38b; background: #e6f4ea; color: #24613d; }
        .callout.info { border-color: #8fb5f5; background: #eef4ff; color: #2c5cc5; }
        .callout.danger { border-color: #f3b8b8; background: #fdecea; color: #903939; }
        pre { background: var(--bg); border: 1px solid var(--border); border-radius: 10px; padding: 12px; overflow-x: auto; font-size: 13px; }
        code { background: var(--bg); border-radius: 6px; padding: 2px 6px; font-size: 13px; }
        .compare-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); gap: 20px; }
        .compare-col { border: 1px solid var(--border); border-radius: 10px; padding: 16px; background: var(--bg); }
        .compare-col h3 { margin: 0 0 12px; font-size: 16px; font-weight: 600; color: var(--text); }
        .compare-row { margin-bottom: 12px; }
        .compare-row:last-child { margin-bottom: 0; }
        .compare-row .field-label { font-size: 12px; text-transform: uppercase; letter-spacing: 0.05em; color: var(--muted); margin-bottom: 4px; }
        .compare-row .field-value { font-size: 14px; color: var(--text); word-break: break-word; }
        .history-table { width: 100%; border-collapse: collapse; font-size: 14px; }
        .history-table th, .history-table td { padding: 10px; border-bottom: 1px solid var(--border); text-align: left; }
        .history-table th { color: var(--muted); font-weight: 600; text-transform: uppercase; font-size: 12px; background: var(--bg); }
        .feedback-summary { color: var(--muted); margin-bottom: 12px; font-size: 14px; }
        .feedback-actions { display: flex; flex-wrap: wrap; gap: 12px; margin-bottom: 12px; }
        #fb-comment { width: 100%; padding: 12px; border: 1px solid var(--border); border-radius: 10px; font-family: inherit; font-size: 14px; resize: vertical; }
        .feedback-list { list-style: none; padding: 0; margin: 16px 0 0; display: flex; flex-direction: column; gap: 12px; }
        .feedback-item { padding: 12px; border: 1px solid var(--border); border-radius: 10px; background: var(--card-bg); }
        @media (max-width: 1024px) {
            .page-header { flex-direction: column; }
            .detail-layout { grid-template-columns: 1fr; }
            .side-column { order: 2; }
            .main-column { order: 1; }
        }
        @media (max-width: 640px) {
            .page-shell { padding: 24px 16px 48px; }
            details.details-card summary { font-size: 16px; padding: 16px; }
            details.details-card > .details-body { padding: 0 16px 16px; }
            .btn { width: 100%; }
            .action-buttons { flex-direction: column; align-items: stretch; }
            .review-action-bar { flex-direction: column; }
        }
    </style>
</head>
{{$pathPattern := "(?:[0-9]|[A-Za-z]|_|-)+(?:\\|(?:[0-9]|[A-Za-z]|_|-)+)*"}}
<body class="layout-shell">
    {{template "global_header" .}}
    <div class="page-shell layout-content">
        <header class="page-header">
            <div>
                <h1 class="page-title">🌱 {{.Venue.Venue.Name}}</h1>
                <p class="page-meta">Venue ID: {{.Venue.Venue.ID}}</p>
            </div>
        </header>
        {{$state := intVal .Venue.Venue.Active 0}}
        {{$hasAIReview := or .LatestHist (or .AIReviewNote .AIOutputNotes)}}
        {{if $hasAIReview}}
        <div class="callout info" style="white-space: pre-wrap; margin-bottom:24px;">
            {{if .LatestHist}}{{.AIReviewNote}}{{else}}No AI review available yet.{{end}}
        </div>
        {{end}}
        {{if and (eq $state 0) $hasAIReview}}
        <div class="action-form review-action">
            <div class="review-action-bar">
                <button type="button" class="btn btn-success" id="approve-btn" onclick="approveVenue()">✅ Approve</button>
                <button type="button" class="btn btn-danger" onclick="openApprovalRejectForm()">❌ Reject</button>
            </div>
            <div id="approval-status-alt" style="display:none; margin-top:12px; padding:10px 12px; border-radius:8px;"></div>
            <form id="approval-reject-form" class="approval-reject-form" onsubmit="handleRejectSubmit(event)">
                <label for="notes">Notes / Reason</label>
                <textarea id="notes" rows="3" placeholder="Add context for your decision"></textarea>
                <div class="form-actions">
                    <button type="submit" class="btn btn-danger">❌ Reject</button>
                </div>
            </form>
        </div>
        {{end}}
        <div class="detail-layout">
            <aside class="side-column">
                <section class="card status-card">
                    <div class="status-header">
                        <div>
                            <h2>Current Status</h2>
                            <div class="status-label">Review overview</div>
                        </div>
                        <div class="status-pill {{if eq $state 1}}approved{{else if eq $state -1}}rejected{{else}}pending{{end}}">
                            {{if eq $state 1}}✅ Approved{{else if eq $state -1}}❌ Rejected{{else}}⏳ Pending{{end}}
                        </div>
                    </div>
                    {{if and (eq $state -1) .Venue.Venue.AdminNote}}
                    <div class="status-note">
                        <strong>Rejection Reason:</strong><br>
                        {{.Venue.Venue.AdminNote}}
                    </div>
                    {{end}}
                    {{if eq $state 0}}
                    <div class="action-form">
                        <h3>AVA Controls</h3>
                        <div id="approval-status" style="display:none; margin-bottom:12px; padding:10px 12px; border-radius:8px;"></div>
                        <form id="approval-form">
                            <div class="action-buttons">
                                <button type="button" class="btn btn-primary" onclick="startAIReview()">🚀 {{if .GoogleData}}Refresh AVA Review{{else}}Start AVA Review{{end}}</button>
                            </div>
                        </form>
                    </div>
                    {{end}}
                    <ul class="status-meta">
                        <li><span>AI Score</span><strong>{{if .LatestHist}}{{.AIScoreFormatted}}{{else}}—{{end}}</strong></li>
                        {{if .LatestHist}}
                        <li><span>Last AI Review</span><strong>{{.LatestHist.ProcessedAt.Format "2006-01-02 15:04"}}</strong></li>
                        {{end}}
                        <li><span>Google Sync</span><strong>{{if .GoogleData}}Available{{else}}Not fetched{{end}}</strong></li>
                        {{if .Venue.Venue.AdminHold}}
                        <li><span>Admin Hold</span><strong>{{.Venue.Venue.AdminHold.Format "2006-01-02 15:04"}}</strong></li>
                        {{end}}
                    </ul>
                </section>

                <section class="card">
                    <h3>Venue Snapshot</h3>
                    <div class="field-grid">
                        <div class="field">
                            <div class="field-label">Type</div>
                            <div class="field-value">{{.VenueTypeLabel}}</div>
                        </div>
                        <div class="field">
                            <div class="field-label">Vegan</div>
                            <div class="field-value">{{.VeganStatusLabel}}</div>
                        </div>
                        <div class="field">
                            <div class="field-label">Category</div>
                            <div class="field-value">{{if .CategoryLabel}}{{.CategoryLabel}}{{else}}N/A{{end}}</div>
                        </div>
                        <div class="field">
                            <div class="field-label">Date Added</div>
                            <div class="field-value">{{.Venue.Venue.CreatedAt.Format "2006-01-02 15:04"}}</div>
                        </div>
                        <div class="field">
                            <div class="field-label">Path</div>
                            <div class="field-value">{{if .VenuePath}}{{.VenuePath}}{{else}}N/A{{end}}</div>
                        </div>
                        <div class="field" style="grid-column: 1 / -1;">
                            <div class="field-label">Submitted By</div>
                            <div class="field-value submitted-by">
                                <span class="submitted-name">{{.Venue.User.Username}}</span>
                                {{if .Venue.User.Trusted}}<span class="badge badge-trust">Trusted {{.TrustPercent}}%</span>{{end}}
                                {{if .Venue.IsVenueAdmin}}<span class="badge">Venue Owner</span>{{end}}
                                {{if .Venue.AmbassadorLevel}}<span class="badge">Ambassador L{{.Venue.AmbassadorLevel}}</span>{{end}}
                                {{if not (or .Venue.User.Trusted .Venue.IsVenueAdmin .Venue.AmbassadorLevel)}}<span class="badge">Regular {{.TrustPercent}}%</span>{{end}}
                            </div>
                        </div>
                    </div>
                </section>
            </aside>

            <main class="main-column">
                {{if .GoogleData}}
                <details class="details-card" open id="combined-info-card">
                    <summary>
                        Combined Information
                        {{if .HasDraft}}
                        <span class="badge" style="background:#ff9800;color:white;margin-left:8px;">Draft Pending</span>
                        {{end}}
                    </summary>
                    <div class="details-body">
                        {{if .HasDraft}}
                        {{if ne .DraftEditorID .CurrentAdminID}}
                        <div class="callout warning" style="margin-bottom:16px;">
                            <strong>⚠️ Draft exists!</strong>
                            {{.DraftEditorName}} has pending edits from {{.DraftUpdatedAt}}.
                            These edits will be shown below. Saving will overwrite their draft.
                        </div>
                        {{end}}
                        {{end}}

                        {{if eq $state 0}}
                        <!-- Edit Controls -->
                        <div id="edit-controls-container" style="margin-bottom:16px;">
                            <!-- Edit Button (shown by default) -->
                            <div id="edit-mode-off" style="display:block;">
                                <button type="button" id="edit-toggle-btn" class="btn btn-secondary" onclick="toggleEditMode()">Edit</button>
                            </div>
                            <!-- Save/Cancel Buttons (shown in edit mode) -->
                            <div id="edit-mode-on" style="display:none;">
                                <div style="display:flex;justify-content:space-between;align-items:center;gap:12px;">
                                    <button type="button" id="cancel-edit-btn" class="btn btn-secondary" onclick="cancelEdit()">Cancel</button>
                                    <div style="display:flex;align-items:center;gap:12px;">
                                        <span id="draft-status" style="color:#28a745;white-space:nowrap;"></span>
                                        <button type="button" id="save-draft-btn" class="btn btn-primary" onclick="saveDraft()">Save Draft</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        {{end}}

                        {{if .NameSuggestion}}
                        <div class="callout info" style="margin-bottom:16px;">
                            <strong>Suggested Name Format:</strong>
                            <div style="margin-top:6px;"><code>{{.NameSuggestion}}</code></div>
                        </div>
                        {{end}}
                        <div class="field-grid" id="editable-fields">
                            <!-- Name Field -->
                            <div class="field" data-field="name">
                                <div class="field-label">
                                    Name
                                    <span class="field-source" id="name-source">source: {{index .Combined.Sources "name"}}</span>
                                    <button type="button" class="reset-field-btn" data-field="name" style="display:none;" title="Reset to original" onclick="resetField('name')">↺</button>
                                </div>
                                <div class="field-value-display" id="name-display"><strong>{{.Combined.Name}}</strong></div>
                                <div class="field-value-edit" id="name-edit" style="display:none;">
                                    <input type="text" id="name-input" value="{{.Combined.Name}}" data-original="{{.Combined.Name}}" data-original-source="{{index .Combined.Sources "name"}}" maxlength="200" required style="width:100%;">
                                    <span class="field-error" id="name-error" style="color:#dc3545;display:none;font-size:0.875em;"></span>
                                </div>
                            </div>

                            <!-- Address Field -->
                            <div class="field" data-field="address">
                                <div class="field-label">
                                    Address
                                    <span class="field-source" id="address-source">source: {{index .Combined.Sources "address"}}</span>
                                    <button type="button" class="reset-field-btn" data-field="address" style="display:none;" title="Reset to original" onclick="resetField('address')">↺</button>
                                </div>
                                <div class="field-value-display" id="address-display">{{if .Combined.Address}}{{.Combined.Address}}{{else}}N/A{{end}}</div>
                                <div class="field-value-edit" id="address-edit" style="display:none;">
                                    <textarea id="address-input" data-original="{{.Combined.Address}}" data-original-source="{{index .Combined.Sources "address"}}" maxlength="500" rows="2" style="width:100%;">{{.Combined.Address}}</textarea>
                                    <span class="field-error" id="address-error" style="color:#dc3545;display:none;font-size:0.875em;"></span>
                                </div>
                            </div>

                            <!-- Phone Field -->
                            <div class="field" data-field="phone">
                                <div class="field-label">
                                    Phone
                                    <span class="field-source" id="phone-source">source: {{index .Combined.Sources "phone"}}</span>
                                    <button type="button" class="reset-field-btn" data-field="phone" style="display:none;" title="Reset to original" onclick="resetField('phone')">↺</button>
                                </div>
                                <div class="field-value-display" id="phone-display">{{if .Combined.Phone}}{{.Combined.Phone}}{{else}}N/A{{end}}</div>
                                <div class="field-value-edit" id="phone-edit" style="display:none;">
                                    <input type="tel" id="phone-input" value="{{.Combined.Phone}}" data-original="{{.Combined.Phone}}" data-original-source="{{index .Combined.Sources "phone"}}" maxlength="50" style="width:100%;">
                                    <span class="field-error" id="phone-error" style="color:#dc3545;display:none;font-size:0.875em;"></span>
                                </div>
                            </div>
                            <!-- Opening Hours Field -->
                            <div class="field" data-field="open_hours" style="grid-column: 1 / -1;">
                                <div class="field-label">
                                    Opening Hours
                                    <span class="field-source" id="open_hours-source">source: {{index .Combined.Sources "hours"}}</span>
                                    <button type="button" class="reset-field-btn" data-field="open_hours" style="display:none;" title="Reset to original" onclick="resetField('open_hours')">↺</button>
                                </div>
                                <div class="field-value-display" id="open_hours-display">
                                    {{if .Combined.Hours}}
                                        {{range .Combined.Hours}}<div>{{formatHourEntry .}}</div>{{end}}
                                    {{else}}N/A{{end}}
                                </div>
                                <div class="field-value-edit" id="open_hours-edit" style="display:none;">
                                    <textarea id="open_hours-input" data-original="{{range .Combined.Hours}}{{.}}{{"\n"}}{{end}}" data-original-source="{{index .Combined.Sources "hours"}}" rows="5" style="width:100%;" placeholder="One entry per line, e.g., Mon-Fri: 9am-5pm">{{range .Combined.Hours}}{{.}}{{"\n"}}{{end}}</textarea>
                                    <span class="field-error" id="open_hours-error" style="color:#dc3545;display:none;font-size:0.875em;"></span>
                                    <small style="color:#666;">One entry per line</small>
                                </div>
                            </div>

                            <!-- Type Field -->
                            <div class="field" data-field="type">
                                <div class="field-label">
                                    Type
                                    <span class="field-source" id="type-source">source: user</span>
                                    <button type="button" class="reset-field-btn" data-field="type" style="display:none;" title="Reset to original" onclick="resetField('type')">↺</button>
                                </div>
                                <div class="field-value-display" id="type-display">{{.VenueTypeLabel}}</div>
                                <div class="field-value-edit" id="type-edit" style="display:none;">
                                    <select id="type-input" data-original="{{.Venue.Venue.EntryType}}" data-original-source="user" style="width:100%;">
                                        <option value="1" {{if eq .Venue.Venue.EntryType 1}}selected{{end}}>Restaurant</option>
                                        <option value="2" {{if eq .Venue.Venue.EntryType 2}}selected{{end}}>Store</option>
                                    </select>
                                    <span class="field-error" id="type-error" style="color:#dc3545;display:none;font-size:0.875em;"></span>
                                </div>
                            </div>

                            <!-- Vegan Field -->
                            <div class="field" data-field="vegan-status">
                                <div class="field-label">
                                    Vegan Status
                                    <span class="field-source" id="vegan-status-source">source: user</span>
                                    <button type="button" class="reset-field-btn" data-field="vegan-status" style="display:none;" title="Reset to original" onclick="resetField('vegan-status')">↺</button>
                                </div>
                                <div class="field-value-display" id="vegan-status-display">{{.Combined.VeganStatus}}</div>
                                <div class="field-value-edit" id="vegan-status-edit" style="display:none;">
                                    <select id="vegan-status-input" data-original-vegan="{{.Venue.Venue.Vegan}}" data-original-vegonly="{{.Venue.Venue.VegOnly}}" data-original-source="user" style="width:100%;">
                                        <option value="veg-options" {{if and (eq .Venue.Venue.Vegan 0) (eq .Venue.Venue.VegOnly 0)}}selected{{end}}>Veg-Options</option>
                                        <option value="vegan" {{if and (eq .Venue.Venue.Vegan 1) (eq .Venue.Venue.VegOnly 1)}}selected{{end}}>Vegan</option>
                                        <option value="vegetarian" {{if and (eq .Venue.Venue.Vegan 0) (eq .Venue.Venue.VegOnly 1)}}selected{{end}}>Vegetarian</option>
                                    </select>
                                    <span class="field-error" id="vegan-status-error" style="color:#dc3545;display:none;font-size:0.875em;"></span>
                                </div>
                            </div>

                            <!-- Category Field -->
                            <div class="field" data-field="category">
                                <div class="field-label">
                                    Category
                                    <span class="field-source" id="category-source">source: user</span>
                                    <button type="button" class="reset-field-btn" data-field="category" style="display:none;" title="Reset to original" onclick="resetField('category')">↺</button>
                                </div>
                                <div class="field-value-display" id="category-display">{{if .CategoryLabel}}{{.CategoryLabel}}{{else}}N/A{{end}}</div>
                                <div class="field-value-edit" id="category-edit" style="display:none;">
                                    <select id="category-input" data-original="{{.Venue.Venue.Category}}" data-original-source="user" style="width:100%;">
                                        {{range .CategoryOptions}}
                                            <option value="{{.ID}}" {{if eq $.Venue.Venue.Category .ID}}selected{{end}}>{{.Label}}</option>
                                        {{end}}
                                    </select>
                                    <span class="field-error" id="category-error" style="color:#dc3545;display:none;font-size:0.875em;"></span>
                                </div>
                            </div>

                            <!-- Location (Lat/Lng) Field -->
                            <div class="field" data-field="latlng">
                                <div class="field-label">
                                    Location
                                    <span class="field-source" id="latlng-source">source: {{index .Combined.Sources "latlng"}}</span>
                                    <button type="button" class="reset-field-btn" data-field="latlng" style="display:none;" title="Reset to original" onclick="resetField('latlng')">↺</button>
                                </div>
                                <div class="field-value-display" id="latlng-display">{{if and .Combined.Lat .Combined.Lng}}{{fmtFloat .Combined.Lat}}, {{fmtFloat .Combined.Lng}}{{else}}N/A{{end}}</div>
                                <div class="field-value-edit" id="latlng-edit" style="display:none;">
                                    <div style="display:grid;grid-template-columns:1fr 1fr;gap:8px;">
                                        <div>
                                            <label for="lat-input" style="font-size:0.875em;color:#666;">Latitude</label>
                                            <input type="number" id="lat-input" value="{{if .Combined.Lat}}{{fmtFloat .Combined.Lat}}{{end}}" data-original="{{if .Combined.Lat}}{{fmtFloat .Combined.Lat}}{{end}}" data-original-source="{{index .Combined.Sources "latlng"}}" step="0.000001" min="-90" max="90" style="width:100%;">
                                        </div>
                                        <div>
                                            <label for="lng-input" style="font-size:0.875em;color:#666;">Longitude</label>
                                            <input type="number" id="lng-input" value="{{if .Combined.Lng}}{{fmtFloat .Combined.Lng}}{{end}}" data-original="{{if .Combined.Lng}}{{fmtFloat .Combined.Lng}}{{end}}" data-original-source="{{index .Combined.Sources "latlng"}}" step="0.000001" min="-180" max="180" style="width:100%;">
                                        </div>
                                    </div>
                                    <span class="field-error" id="latlng-error" style="color:#dc3545;display:none;font-size:0.875em;"></span>
                                </div>
                            </div>

                            <!-- Path Field -->
                            <div class="field" data-field="path">
                                <div class="field-label">
                                    Location Path
                                    <span class="field-source" id="path-source">source: {{index .Combined.Sources "path"}}</span>
                                    <button type="button" class="reset-field-btn" data-field="path" style="display:none;" title="Reset to original" onclick="resetField('path')">↺</button>
                                </div>
                                <div class="field-value-display" id="path-display">{{if .Combined.Path}}{{.Combined.Path}}{{else}}N/A{{end}}</div>
                                <div class="field-value-edit" id="path-edit" style="display:none;">
                                    <input type="text" id="path-input" value="{{.Combined.Path}}" data-original="{{.Combined.Path}}" data-original-source="{{index .Combined.Sources "path"}}" maxlength="255" pattern="{{$pathPattern}}" style="width:100%;" placeholder="north_america|usa|chicago">
                                    <span class="field-error" id="path-error" style="color:#dc3545;display:none;font-size:0.875em;"></span>
                                    <small style="color:#666;">Geographic hierarchy separated by pipes (e.g., north_america|usa|chicago)</small>
                                </div>
                            </div>

                            <!-- Website Field -->
                            <div class="field" data-field="website">
                                <div class="field-label">
                                    Website
                                    <span class="field-source" id="website-source">source: {{index .Combined.Sources "website"}}</span>
                                    <button type="button" class="reset-field-btn" data-field="website" style="display:none;" title="Reset to original" onclick="resetField('website')">↺</button>
                                </div>
                                <div class="field-value-display" id="website-display">{{if .Combined.Website}}<a href="{{.Combined.Website}}" target="_blank">{{.Combined.Website}}</a>{{else}}N/A{{end}}</div>
                                <div class="field-value-edit" id="website-edit" style="display:none;">
                                    <input type="url" id="website-input" value="{{.Combined.Website}}" data-original="{{.Combined.Website}}" data-original-source="{{index .Combined.Sources "website"}}" maxlength="500" style="width:100%;" placeholder="https://example.com">
                                    <span class="field-error" id="website-error" style="color:#dc3545;display:none;font-size:0.875em;"></span>
                                </div>
                            </div>
                            {{if .Combined.Types}}
                            <div class="field" style="grid-column: 1 / -1;">
                                <div class="field-label">Types{{with index .Combined.Sources "types"}}<span class="field-source">source: {{.}}</span>{{end}}</div>
                                <div class="field-value">{{range .Combined.Types}}<code>{{.}}</code>{{end}}</div>
                            </div>
                            {{end}}
                            {{if .TypeMismatchAlert}}
                            <div class="field" style="grid-column: 1 / -1;">
                                <div class="callout warning">
                                    <strong>Classification warning:</strong> The venue's classification may not align with Google's business types. This may indicate data quality issues.
                                </div>
                            </div>
                            {{end}}
                            <!-- Description Field -->
                            <div class="field" data-field="description" style="grid-column: 1 / -1;">
                                <div class="field-label">
                                    Description
                                    <span class="field-source" id="description-source">source: {{index .Combined.Sources "description"}}</span>
                                    <button type="button" class="reset-field-btn" data-field="description" style="display:none;" title="Reset to original" onclick="resetField('description')">↺</button>
                                </div>
                                <div class="field-value-display" id="description-display">
                                    {{if .Combined.Description}}<div class="callout">{{.Combined.Description}}</div>{{else}}N/A{{end}}
                                </div>
                                <div class="field-value-edit" id="description-edit" style="display:none;">
                                    <textarea id="description-input" data-original="{{.Combined.Description}}" data-original-source="{{index .Combined.Sources "description"}}" maxlength="5000" rows="4" style="width:100%;">{{.Combined.Description}}</textarea>
                                    <span class="field-error" id="description-error" style="color:#dc3545;display:none;font-size:0.875em;"></span>
                                </div>
                            </div>
                            {{if .DescriptionSuggestion}}
                            <div class="field" style="grid-column: 1 / -1;">
                                <div class="field-label">Suggested Description</div>
                                <div class="field-value"><div class="callout success">{{.DescriptionSuggestion}}</div></div>
                            </div>
                            {{end}}

                            <!-- Hours Note Field -->
                            <div class="field" data-field="hours_note" style="grid-column: 1 / -1;">
                                <div class="field-label">
                                    Hours Note (Closed Days)
                                    <button type="button" class="reset-field-btn" data-field="hours_note" style="display:none;" title="Reset to original" onclick="resetField('hours_note')">↺</button>
                                </div>
                                <div class="field-value-display" id="hours_note-display">
                                    {{if .Venue.Venue.OpenHoursNote}}
                                        {{.Venue.Venue.OpenHoursNote}}
                                    {{else if .ApprovalHoursNote}}
                                        {{.ApprovalHoursNote}}
                                    {{else if .ClosedDaysSuggestion}}
                                        <div class="callout info"><code>{{.ClosedDaysSuggestion}}</code></div>
                                    {{else}}
                                        N/A
                                    {{end}}
                                </div>
                                <div class="field-value-edit" id="hours_note-edit" style="display:none;">
                                    <textarea id="hours_note-input" data-original="{{if .Venue.Venue.OpenHoursNote}}{{.Venue.Venue.OpenHoursNote}}{{else if .ApprovalHoursNote}}{{.ApprovalHoursNote}}{{else}}{{.ClosedDaysSuggestion}}{{end}}" data-original-source="{{if .Venue.Venue.OpenHoursNote}}user{{else if .ApprovalHoursNote}}editor{{else}}ai{{end}}" maxlength="500" rows="2" style="width:100%;">{{if .Venue.Venue.OpenHoursNote}}{{.Venue.Venue.OpenHoursNote}}{{else if .ApprovalHoursNote}}{{.ApprovalHoursNote}}{{else}}{{.ClosedDaysSuggestion}}{{end}}</textarea>
                                    <span class="field-error" id="hours_note-error" style="color:#dc3545;display:none;font-size:0.875em;"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </details>
                {{end}}

                <details class="details-card" {{if not .GoogleData}}open{{end}}>
                    <summary>Original Submission</summary>
                    <div class="details-body">
                        <div class="field-grid">
                            <div class="field">
                                <div class="field-label">Name</div>
                                <div class="field-value"><strong>{{.Venue.Venue.Name}}</strong></div>
                            </div>
                            <div class="field">
                                <div class="field-label">Location</div>
                                <div class="field-value">{{.Venue.Venue.Location}}</div>
                            </div>
                            <div class="field">
                                <div class="field-label">Path</div>
                                <div class="field-value">{{if .VenuePath}}{{.VenuePath}}{{else}}N/A{{end}}</div>
                            </div>
                            <div class="field">
                                <div class="field-label">Phone</div>
                                <div class="field-value">{{if .Venue.Venue.Phone}}{{.Venue.Venue.Phone}}{{else}}N/A{{end}}</div>
                            </div>
                            <div class="field">
                                <div class="field-label">Website</div>
                                <div class="field-value">{{if .Venue.Venue.URL}}<a href="{{.Venue.Venue.URL}}" target="_blank">{{.Venue.Venue.URL}}</a>{{else}}N/A{{end}}</div>
                            </div>
                            <div class="field">
                                <div class="field-label">Type</div>
                                <div class="field-value">{{.VenueTypeLabel}}</div>
                            </div>
                            <div class="field">
                                <div class="field-label">Vegan</div>
                                <div class="field-value">{{.VeganStatusLabel}}</div>
                            </div>
                            <div class="field">
                                <div class="field-label">Category</div>
                                <div class="field-value">{{if .CategoryLabel}}{{.CategoryLabel}}{{else}}N/A{{end}}</div>
                            </div>
                            <div class="field">
                                <div class="field-label">Admin Note</div>
                                <div class="field-value">{{if .Venue.Venue.AdminNote}}{{.Venue.Venue.AdminNote}}{{else}}N/A{{end}}</div>
                            </div>
                            <div class="field">
                                <div class="field-label">Admin Hold</div>
                                <div class="field-value">{{if .Venue.Venue.AdminHold}}{{.Venue.Venue.AdminHold.Format "2006-01-02 15:04"}}{{else}}—{{end}}</div>
                            </div>
                            <div class="field">
                                <div class="field-label">Admin Hold Email Notes</div>
                                <div class="field-value">{{if .Venue.Venue.AdminHoldEmailNote}}{{.Venue.Venue.AdminHoldEmailNote}}{{else}}N/A{{end}}</div>
                            </div>
                            {{if .Venue.Venue.AdditionalInfo}}
                            <div class="field" style="grid-column: 1 / -1;">
                                <div class="field-label">Additional Information</div>
                                <div class="field-value"><div class="callout">{{.Venue.Venue.AdditionalInfo}}</div></div>
                            </div>
                            {{end}}
                        </div>
                    </div>
                </details>

                {{if $hasAIReview}}
                <details class="details-card">
                    <summary>AI Review</summary>
                    <div class="details-body">
                        <div class="field-grid">
                            <div class="field" style="grid-column: 1 / -1;">
                                <div class="field-label">Decision Engine</div>
                                <div class="field-value"><div class="callout info" style="white-space: pre-wrap;">{{if .LatestHist}}{{.AIReviewNote}}{{else}}No AI review available yet.{{end}}</div></div>
                            </div>
                            <div class="field">
                                <div class="field-label">AI Score</div>
                                <div class="field-value"><strong>{{if .LatestHist}}{{.AIScoreFormatted}}{{else}}—{{end}}</strong></div>
                            </div>
                            <div class="field" style="grid-column: 1 / -1;">
                                <div class="field-label">AI Review Note</div>
                                <div class="field-value"><div class="callout" style="white-space: pre-wrap;">{{if .LatestHist}}{{if .AIOutputNotes}}{{.AIOutputNotes}}{{else}}—{{end}}{{else}}—{{end}}</div></div>
                            </div>
                            {{if .PathValidationIssue}}
                            <div class="field" style="grid-column: 1 / -1;">
                                <div class="callout warning">
                                    <strong>{{.PathValidationConfidence}} confidence:</strong> {{.PathValidationIssue}}
                                </div>
                            </div>
                            {{end}}
                            <div class="field" style="grid-column: 1 / -1;">
                                <div class="field-label">AI Output (JSON)</div>
                                <div class="field-value"><pre>{{if .LatestHist}}{{if .AIOutputRestPretty}}{{.AIOutputRestPretty}}{{else if .AIOutputFullPretty}}{{.AIOutputFullPretty}}{{else}}{}{{end}}{{else}}{}{{end}}</pre></div>
                            </div>
                            <div class="field" style="grid-column: 1 / -1;">
                                <div class="field-label">AI Score Breakdown (JSON)</div>
                                <div class="field-value"><pre>{{if .LatestHist}}{{if .PrettyBreakdown}}{{.PrettyBreakdown}}{{else}}{}{{end}}{{else}}{}{{end}}</pre></div>
                            </div>
                        </div>
                    </div>
                </details>
                {{end}}

                {{if .GoogleData}}
                <details class="details-card">
                    <summary>Original vs Google Places</summary>
                    <div class="details-body">
                        <div class="compare-grid">
                            <div class="compare-col">
                                <h3>Original (Submitted)</h3>
                                <div class="compare-row">
                                    <div class="field-label">Name</div>
                                    <div class="field-value">{{.Venue.Venue.Name}}</div>
                                </div>
                                <div class="compare-row">
                                    <div class="field-label">Address / Location</div>
                                    <div class="field-value">{{.Venue.Venue.Location}}</div>
                                </div>
                                <div class="compare-row">
                                    <div class="field-label">Phone</div>
                                    <div class="field-value">{{if .Venue.Venue.Phone}}{{.Venue.Venue.Phone}}{{else}}N/A{{end}}</div>
                                </div>
                                <div class="compare-row">
                                    <div class="field-label">Website</div>
                                    <div class="field-value">{{if .Venue.Venue.URL}}<a href="{{.Venue.Venue.URL}}" target="_blank">{{.Venue.Venue.URL}}</a>{{else}}N/A{{end}}</div>
                                </div>
                                <div class="compare-row">
                                    <div class="field-label">Type</div>
                                    <div class="field-value">{{.VenueTypeLabel}}</div>
                                </div>
                                <div class="compare-row">
                                    <div class="field-label">Vegan</div>
                                    <div class="field-value">{{.VeganStatusLabel}}</div>
                                </div>
                                <div class="compare-row">
                                    <div class="field-label">Category</div>
                                    <div class="field-value">{{if .CategoryLabel}}{{.CategoryLabel}}{{else}}N/A{{end}}</div>
                                </div>
                            </div>
                            <div class="compare-col">
                                <h3>Google Places</h3>
                                <div class="compare-row">
                                    <div class="field-label">Name</div>
                                    <div class="field-value">{{.GoogleData.Name}}</div>
                                </div>
                                <div class="compare-row">
                                    <div class="field-label">Address</div>
                                    <div class="field-value">{{.GoogleData.FormattedAddress}}</div>
                                </div>
                                <div class="compare-row">
                                    <div class="field-label">Phone</div>
                                    <div class="field-value">{{if .GoogleData.FormattedPhone}}{{.GoogleData.FormattedPhone}}{{else}}N/A{{end}}</div>
                                </div>
                                <div class="compare-row">
                                    <div class="field-label">Website</div>
                                    <div class="field-value">{{if .GoogleData.Website}}<a href="{{.GoogleData.Website}}" target="_blank">{{.GoogleData.Website}}</a>{{else}}N/A{{end}}</div>
                                </div>
                                <div class="compare-row">
                                    <div class="field-label">Place ID</div>
                                    <div class="field-value">{{.GoogleData.PlaceID}}</div>
                                </div>
                                <div class="compare-row">
                                    <div class="field-label">Business Status</div>
                                    <div class="field-value">{{if .GoogleData.BusinessStatus}}{{.GoogleData.BusinessStatus}}{{else}}N/A{{end}}</div>
                                </div>
                                <div class="compare-row">
                                    <div class="field-label">Rating</div>
                                    <div class="field-value">{{.GoogleData.Rating}}</div>
                                </div>
                                <div class="compare-row">
                                    <div class="field-label">User Ratings Total</div>
                                    <div class="field-value">{{.GoogleData.UserRatingsTotal}}</div>
                                </div>
                                <div class="compare-row">
                                    <div class="field-label">Location (Lat, Lng)</div>
                                    <div class="field-value">{{.GoogleData.Geometry.Location.Lat}}, {{.GoogleData.Geometry.Location.Lng}}</div>
                                </div>
                                <div class="compare-row">
                                    <div class="field-label">Viewport NE</div>
                                    <div class="field-value">{{.GoogleData.Geometry.Viewport.Northeast.Lat}}, {{.GoogleData.Geometry.Viewport.Northeast.Lng}}</div>
                                </div>
                                <div class="compare-row">
                                    <div class="field-label">Viewport SW</div>
                                    <div class="field-value">{{.GoogleData.Geometry.Viewport.Southwest.Lat}}, {{.GoogleData.Geometry.Viewport.Southwest.Lng}}</div>
                                </div>
                                {{if .GoogleData.OpeningHours}}
                                <div class="compare-row">
                                    <div class="field-label">Open Now</div>
                                    <div class="field-value">{{if .GoogleData.OpeningHours.OpenNow}}Yes{{else}}No{{end}}</div>
                                </div>
                                {{if .GoogleData.OpeningHours.WeekdayText}}
                                <div class="compare-row">
                                    <div class="field-label">Weekday Text</div>
                                    <div class="field-value">
                                        {{range .GoogleData.OpeningHours.WeekdayText}}<div>{{.}}</div>{{end}}
                                    </div>
                                </div>
                                {{end}}
                                {{if .GoogleData.OpeningHours.Periods}}
                                <div class="compare-row">
                                    <div class="field-label">Periods</div>
                                    <div class="field-value">
                                        {{range .GoogleData.OpeningHours.Periods}}
                                            <div>Open: day {{.Open.Day}} at {{.Open.Time}} — Close: day {{.Close.Day}} at {{.Close.Time}}</div>
                                        {{end}}
                                    </div>
                                </div>
                                {{end}}
                                {{end}}
                                {{if .GoogleData.AddressComponents}}
                                <div class="compare-row">
                                    <div class="field-label">Address Components</div>
                                    <div class="field-value">
                                        {{range .GoogleData.AddressComponents}}
                                            <div style="margin-bottom:6px;">
                                                <strong>{{.LongName}}</strong> ({{.ShortName}})
                                                <div>
                                                    {{if .Types}}
                                                        {{range .Types}}<code>{{.}}</code>{{end}}
                                                    {{else}}
                                                        <span style="color: var(--muted);">no types</span>
                                                    {{end}}
                                                </div>
                                            </div>
                                        {{end}}
                                    </div>
                                </div>
                                {{end}}
                                {{if .GoogleData.Types}}
                                <div class="compare-row">
                                    <div class="field-label">Types</div>
                                    <div class="field-value">{{range .GoogleData.Types}}<code>{{.}}</code>{{end}}</div>
                                </div>
                                {{end}}
                                <div class="compare-row">
                                    <div class="field-label">Fetched At</div>
                                    <div class="field-value">{{.GoogleData.FetchedAt.Format "2006-01-02 15:04"}}</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </details>
                {{end}}

                <details class="details-card" id="feedback-section">
                    <summary>Editor Feedback</summary>
                    <div class="details-body">
                        <div class="feedback-summary">
                            <span id="fb-up-count">0</span> 👍 · <span id="fb-down-count">0</span> 👎
                        </div>
                        <div class="feedback-actions">
                            <button class="btn btn-subtle" id="btn-thumbs-up" onclick="submitFeedback('thumbs_up')">👍 Thumbs Up</button>
                            <button class="btn btn-danger" id="btn-thumbs-down" onclick="submitFeedback('thumbs_down')">👎 Thumbs Down</button>
                            <input type="hidden" id="prompt_version" value="{{if .LatestHist}}{{if .LatestHist.PromptVersion}}{{.LatestHist.PromptVersion}}{{end}}{{end}}" />
                        </div>
                        <label for="fb-comment" style="display:block; font-size:13px; font-weight:600; color: var(--muted); margin-bottom:6px;">Optional comment</label>
                        <textarea id="fb-comment" rows="4" placeholder="Share what worked well or what needs attention"></textarea>
                        <div id="fb-status" style="margin-top:10px; display:none;"></div>
                        <ul id="fb-list" class="feedback-list"></ul>
                    </div>
                </details>

                {{if .History}}
                <details class="details-card">
                    <summary>Validation History</summary>
                    <div class="details-body">
                        <table class="history-table">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Action</th>
                                    <th>Score</th>
                                    <th>Notes</th>
                                    <th>Reviewer</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{range .History}}
                                <tr>
                                    <td>{{.ProcessedAt.Format "2006-01-02 15:04"}}</td>
                                    <td>
                                        {{if eq .ValidationStatus "approved"}}
                                            <span class="status-pill approved">Approved</span>
                                        {{else if eq .ValidationStatus "rejected"}}
                                            <span class="status-pill rejected">Rejected</span>
                                        {{else}}
                                            <span class="status-pill pending">Review</span>
                                        {{end}}
                                    </td>
                                    <td>{{.ValidationScore}}</td>
                                    <td>{{.ValidationNotes}}</td>
                                    <td>System</td>
                                </tr>
                                {{end}}
                            </tbody>
                        </table>
                    </div>
                </details>
                {{end}}

                {{if .AuditLogs}}
                <details class="details-card">
                    <summary>Audit Logs</summary>
                    <div class="details-body">
                        <table class="history-table">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Action</th>
                                    <th>Reason</th>
                                    <th>Admin ID</th>
                                    <th>Data Replacements</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{range .AuditLogs}}
                                <tr>
                                    <td>{{.CreatedAt.Format "2006-01-02 15:04"}}</td>
                                    <td>
                                        {{if eq .Status "approved"}}
                                            <span class="status-pill approved">Approved</span>
                                        {{else if eq .Status "rejected"}}
                                            <span class="status-pill rejected">Rejected</span>
                                        {{else}}
                                            <span class="status-pill pending">{{.Status}}</span>
                                        {{end}}
                                    </td>
                                    <td>{{if .Reason}}{{.Reason}}{{else}}—{{end}}</td>
                                    <td>{{if .AdminID}}{{.AdminID}}{{else}}System{{end}}</td>
                                    <td>
                                        {{if .DataReplacements}}
                                            <details>
                                                <summary style="cursor: pointer; color: var(--accent);">View Changes</summary>
                                                <pre>{{.DataReplacements}}</pre>
                                            </details>
                                        {{else}}
                                            —
                                        {{end}}
                                    </td>
                                </tr>
                                {{end}}
                            </tbody>
                        </table>
                    </div>
                </details>
                {{end}}
            </main>
        </div>
    </div>

    <script>
        const basePath = '{{basePath}}';
        function startAIReview() {
            const btn = event.target;
            const originalText = btn.textContent;

            // Disable button and show loading state
            btn.disabled = true;
            btn.style.opacity = '0.6';
            btn.style.cursor = 'not-allowed';
            btn.textContent = '⏳ Processing...';

            // Clear any previous error messages
            const existingError = document.getElementById('ai-review-error');
            if (existingError) {
                existingError.remove();
            }

            fetch(basePath + 'venues/{{.Venue.Venue.ID}}/validate', {
                method: 'POST'
            }).then(response => {
                if (!response.ok) {
                    throw new Error('Request failed with status: ' + response.status);
                }
                return response.json();
            }).then(data => {
                if (data.status === 'success' && data.completed) {
                    // Success - reload the page immediately to show fresh data
                    window.location.reload();
                } else if (data.status === 'error') {
                    // Show error message inline
                    throw new Error(data.message || 'Processing failed');
                } else {
                    throw new Error('Unexpected response from server');
                }
            }).catch(err => {
                console.error('Error starting AI review:', err);

                // Re-enable button
                btn.disabled = false;
                btn.style.opacity = '1';
                btn.style.cursor = 'pointer';
                btn.textContent = originalText;

                // Show error message inline
                const errorDiv = document.createElement('div');
                errorDiv.id = 'ai-review-error';
                errorDiv.style.cssText = 'margin-top: 10px; padding: 12px; background: #f8d7da; color: #721c24; border-radius: 5px; border-left: 4px solid #dc3545;';
                errorDiv.textContent = '❌ ' + (err.message || 'Failed to start AVA Review');
                btn.parentElement.appendChild(errorDiv);
            });
        }
        function showApprovalStatus(message, isError) {
            const statusDiv = document.getElementById('approval-status') || document.getElementById('approval-status-alt');
            if (statusDiv) {
                statusDiv.style.display = 'block';
                statusDiv.style.backgroundColor = isError ? '#f8d7da' : '#d4edda';
                statusDiv.style.color = isError ? '#721c24' : '#155724';
                statusDiv.style.borderLeft = isError ? '4px solid #dc3545' : '4px solid #28a745';
                statusDiv.textContent = (isError ? '❌ ' : '✅ ') + message;
            }
        }

        function hideApprovalStatus() {
            const statusDiv = document.getElementById('approval-status') || document.getElementById('approval-status-alt');
            if (statusDiv) {
                statusDiv.style.display = 'none';
            }
        }

        function openApprovalRejectForm() {
            hideApprovalStatus();
            const form = document.getElementById('approval-reject-form');
            if (form) {
                const willShow = !form.classList.contains('is-visible');
                form.classList.toggle('is-visible', willShow);
                if (willShow) {
                    const notesField = form.querySelector('#notes');
                    if (notesField) {
                        notesField.focus();
                    }
                }
            }
        }

        function handleRejectSubmit(event) {
            event.preventDefault();
            rejectVenue();
        }

        function approveVenue() {
            const notesField = document.getElementById('notes');
            const notes = notesField ? notesField.value : '';
            setApprovalLoading(true);
            updateVenueStatus('approve', notes || 'Manual approval');
        }

        function rejectVenue() {
            const notesField = document.getElementById('notes');
            const notes = notesField ? notesField.value : '';
            if (!notes.trim()) {
                showApprovalStatus('Rejection reason is required.', true);
                return;
            }
            updateVenueStatus('reject', notes);
        }

        function updateVenueStatus(action, notes) {
            hideApprovalStatus();
            const formData = new FormData();
            formData.append(action === 'approve' ? 'notes' : 'reason', notes);

            const isApprove = action === 'approve';

            fetch(basePath + 'venues/{{.Venue.Venue.ID}}/' + action, {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.message || 'Error updating venue status');
                    }).catch(err => {
                        if (err instanceof SyntaxError) {
                            throw new Error('Error updating venue status');
                        }
                        throw err;
                    });
                }
                return response.json();
            })
            .then(data => {
                // Success - reload the page to show updated status
                location.reload();
            })
            .catch(error => {
                if (isApprove) {
                    setApprovalLoading(false);
                }
                console.error('Error:', error);
                showApprovalStatus(error.message || 'Error updating venue status', true);
            });
        }
        // --- Feedback UI ---
        function setFBStatus(msg, ok) {
            const el = document.getElementById('fb-status');
            el.style.display = 'block';
            el.style.color = ok ? '#2e7d32' : '#c62828';
            el.textContent = msg;
        }
        function disableFBButtons() {
            document.getElementById('btn-thumbs-up').disabled = true;
            document.getElementById('btn-thumbs-down').disabled = true;
            document.getElementById('btn-thumbs-up').style.opacity = 0.6;
            document.getElementById('btn-thumbs-down').style.opacity = 0.6;
            document.getElementById('btn-thumbs-up').style.cursor = 'not-allowed';
            document.getElementById('btn-thumbs-down').style.cursor = 'not-allowed';
        }
        function submitFeedback(type) {
            const pv = document.getElementById('prompt_version').value || '';
            const cmt = document.getElementById('fb-comment').value || '';
            const fd = new URLSearchParams();
            fd.append('feedback_type', type);
            if (pv) fd.append('prompt_version', pv);
            if (cmt) fd.append('comment', cmt);
            const url = basePath + 'venues/{{.Venue.Venue.ID}}/feedback';
            setFBStatus('Submitting...', true);
            fetch(url, {
              method: 'POST',
              headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
              body: fd.toString(),
            })
              .then(async (res) => {
                if (res.status === 409) {
                  setFBStatus('Thanks! Feedback already recorded for this session.', true);
                  disableFBButtons();
                  refreshFeedback();
                  return;
                }
                if (!res.ok) {
                  const t = await res.text();
                  throw new Error(t || 'submission failed');
                }
                return res.json().catch(() => ({}));
              })
              .then(() => {
                setFBStatus('Thanks for your feedback!', true);
                disableFBButtons();
                refreshFeedback();
              })
              .catch(err => {
                console.error('feedback error', err);
                setFBStatus('Failed to submit feedback', false);
              });
        }
        function refreshFeedback() {
            fetch(basePath + 'venues/{{.Venue.Venue.ID}}/feedback')
              .then(r => r.ok ? r.json() : { thumbs_up: 0, thumbs_down: 0 })
              .then(d => {
                document.getElementById('fb-up-count').textContent = d.thumbs_up || 0;
                document.getElementById('fb-down-count').textContent = d.thumbs_down || 0;
                // remove all the elements from the list
                const ul = document.getElementById('fb-list');
                while (ul.firstChild) {
                  ul.removeChild(ul.firstChild);
                }
                d.items.forEach((it, idx) => {
                  const li = document.createElement('li');
                  li.style.padding = '8px 0';
                  li.style.borderBottom = idx === d.items.length - 1 ? '' : '1px solid #ccc';

                  const dt = new Date(it.created_at);
                  const feedbackType = it.feedback_type === 'thumbs_down' ? '👎' : '👍';
                  li.textContent = `[${dt.toLocaleDateString()} ${dt.toLocaleTimeString()}] ${feedbackType}${it.prompt_version ? ', v' + it.prompt_version : ''} -- ${it.comment || ''}`;

                  ul.appendChild(li);
                });
                if (d.items.length === 0) {
                  const li = document.createElement('li');
                  li.style.marginBottom = '8px';
                  li.textContent = 'No feedback yet.';
                  ul.appendChild(li);
                }
              }).catch(() => {});
        }
        document.addEventListener('DOMContentLoaded', refreshFeedback);

        // ========== VENUE EDIT FUNCTIONALITY ==========

        // Label mapping functions for type/vegan/category fields
        function getTypeLabel(value) {
            const intValue = parseInt(value);
            if (intValue === 2) return "Store";
            return "Restaurant";
        }

        function getVeganLabel(value) {
            const intValue = parseInt(value);
            if (intValue === 1) return "Vegan";
            if (intValue === 2) return "Veg Options";
            return "Vegan Friendly";
        }

        const CATEGORY_LABELS = {{.CategoryOptionsJSON}};

        function getCategoryLabel(value) {
            if (value === undefined || value === null) {
                return "N/A";
            }
            const key = String(parseInt(value, 10));
            if (CATEGORY_LABELS[key]) {
                return CATEGORY_LABELS[key];
            }
            if (CATEGORY_LABELS[value]) {
                return CATEGORY_LABELS[value];
            }
            return "N/A";
        }

        // Keep this in sync with the path input's pattern; browsers validate via /.../v so '-' must live outside [] ranges.
        const PATH_VALUE_PATTERN = {{printf "%q" $pathPattern}};
        const PATH_SEGMENT_REGEX = /^[0-9A-Za-z_-]+$/;
        const isValidPathValue = (value) => {
            if (!value) return false;
            const segments = value.split('|');
            if (segments.length === 0) return false;
            return segments.every(segment => PATH_SEGMENT_REGEX.test(segment));
        };

        let approvalLoading = false;
        function setApprovalLoading(isLoading) {
            const btn = document.getElementById('approve-btn');
            if (!btn) return;
            if (isLoading) {
                if (!btn.dataset.originalContent) {
                    btn.dataset.originalContent = btn.innerHTML;
                }
                btn.disabled = true;
                btn.classList.add('is-loading');
                btn.innerHTML = '<span class="spinner" aria-hidden="true"></span><span> Approving...</span>';
                approvalLoading = true;
            } else if (approvalLoading) {
                if (btn.dataset.originalContent) {
                    btn.innerHTML = btn.dataset.originalContent;
                }
                btn.disabled = false;
                btn.classList.remove('is-loading');
                approvalLoading = false;
            }
        }

        const EditState = {
            isEditing: false,
            originalData: {},
            hasUnsavedChanges: false,
            venueID: {{.Venue.Venue.ID}},

            fields: ['name', 'address', 'phone', 'website', 'open_hours', 'type', 'vegan-status', 'category', 'lat', 'lng', 'path', 'description', 'hours_note'],

            init() {
                // Load original data from template
                this.fields.forEach(field => {
                    let input;
                    if (field === 'lat') {
                        input = document.getElementById('lat-input');
                    } else if (field === 'lng') {
                        input = document.getElementById('lng-input');
                    } else {
                        input = document.getElementById(field + '-input');
                    }

                    if (input) {
                        this.originalData[field] = {
                            value: input.dataset.original || input.value,
                            source: input.dataset.originalSource || 'user'
                        };
                    }
                });

                // Load draft if exists
                this.loadDraft();

                // Add input listeners for validation
                this.fields.forEach(field => {
                    let input;
                    if (field === 'lat') {
                        input = document.getElementById('lat-input');
                    } else if (field === 'lng') {
                        input = document.getElementById('lng-input');
                    } else {
                        input = document.getElementById(field + '-input');
                    }

                    if (input) {
                        input.addEventListener('input', () => {
                            validateField(field);
                            this.hasUnsavedChanges = true;
                        });
                    }
                });
            },

            async loadDraft() {
                try {
                    const response = await fetch(basePath + 'venues/' + this.venueID + '/draft');
                    const data = await response.json();

                    if (data.has_draft && data.draft_data) {
                        this.applyDraftToInputs(data.draft_data);
                        this.updateDisplayWithDraft(data.draft_data);
                    }
                } catch (err) {
                    console.error('Error loading draft:', err);
                }
            },

            applyDraftToInputs(draftData) {
                // Special handling for vegan + vegonly → vegan-status
                if (draftData.vegan && draftData.vegonly) {
                    const vegan = draftData.vegan.value;
                    const vegonly = draftData.vegonly.value;
                    const input = document.getElementById('vegan-status-input');
                    const source = document.getElementById('vegan-status-source');

                    if (input) {
                        let statusValue = 'veg-options';
                        if (vegan === 1 && vegonly === 1) {
                            statusValue = 'vegan';
                        } else if (vegan === 0 && vegonly === 1) {
                            statusValue = 'vegetarian';
                        }
                        input.value = statusValue;

                        if (source) {
                            source.textContent = 'source: editor';
                        }
                    }
                }

                Object.keys(draftData).forEach(field => {
                    // Skip vegan and vegonly as they're handled above
                    if (field === 'vegan' || field === 'vegonly') {
                        return;
                    }

                    const draftField = draftData[field];
                    let input, source;

                    if (field === 'lat') {
                        input = document.getElementById('lat-input');
                        source = document.getElementById('latlng-source');
                    } else if (field === 'lng') {
                        input = document.getElementById('lng-input');
                        source = document.getElementById('latlng-source');
                    } else {
                        input = document.getElementById(field + '-input');
                        source = document.getElementById(field + '-source');
                    }

                    if (input && draftField && draftField.value !== null && draftField.value !== undefined) {
                        if (field === 'open_hours' && Array.isArray(draftField.value)) {
                            input.value = draftField.value.join('\n');
                        } else {
                            input.value = draftField.value;
                        }

                        if (source) {
                            source.textContent = 'source: editor';
                        }
                    }
                });
            },

            updateDisplayWithDraft(draftData) {
                // Special handling for vegan + vegonly → vegan-status display
                if (draftData.vegan && draftData.vegonly) {
                    const vegan = draftData.vegan.value;
                    const vegonly = draftData.vegonly.value;
                    const display = document.getElementById('vegan-status-display');
                    const source = document.getElementById('vegan-status-source');

                    if (display) {
                        let statusLabel = 'Veg-Options';
                        if (vegan === 1 && vegonly === 1) {
                            statusLabel = 'Vegan';
                        } else if (vegan === 0 && vegonly === 1) {
                            statusLabel = 'Vegetarian';
                        }
                        display.textContent = statusLabel;

                        if (source) {
                            source.textContent = 'source: editor';
                        }
                    }
                }

                Object.keys(draftData).forEach(field => {
                    // Skip vegan and vegonly as they're handled above
                    if (field === 'vegan' || field === 'vegonly') {
                        return;
                    }

                    const draftField = draftData[field];
                    let display, source;

                    // Get display element and source label
                    if (field === 'lat' || field === 'lng') {
                        display = document.getElementById('latlng-display');
                        source = document.getElementById('latlng-source');
                    } else {
                        display = document.getElementById(field + '-display');
                        source = document.getElementById(field + '-source');
                    }

                    // Update display value
                    if (display && draftField && draftField.value !== null && draftField.value !== undefined) {
                        if (field === 'open_hours' && Array.isArray(draftField.value)) {
                            // Format hours as HTML list
                            display.innerHTML = draftField.value.map(h => `<div>${h}</div>`).join('');
                        } else if (field === 'lat') {
                            // For lat, update the combined lat/lng display
                            const lngDraft = draftData['lng'];
                            if (lngDraft && lngDraft.value !== null) {
                                display.textContent = `${draftField.value}, ${lngDraft.value}`;
                            }
                        } else if (field === 'lng') {
                            // For lng, update the combined lat/lng display
                            const latDraft = draftData['lat'];
                            if (latDraft && latDraft.value !== null) {
                                display.textContent = `${latDraft.value}, ${draftField.value}`;
                            }
                        } else if (field === 'type') {
                            // Convert integer to label for type
                            display.textContent = getTypeLabel(draftField.value);
                        } else if (field === 'category') {
                            // Convert integer to label for category
                            display.textContent = getCategoryLabel(draftField.value);
                        } else if (field === 'website') {
                            // Display website as clickable link
                            if (draftField.value) {
                                display.innerHTML = `<a href="${draftField.value}" target="_blank">${draftField.value}</a>`;
                            } else {
                                display.textContent = 'N/A';
                            }
                        } else {
                            // Regular field
                            display.textContent = draftField.value;
                        }
                    }

                    // Update source label to "editor"
                    if (source) {
                        source.textContent = 'source: editor';
                    }
                });
            }
        };

        function toggleEditMode() {
            EditState.isEditing = !EditState.isEditing;

            // Toggle visibility of display vs edit
            document.querySelectorAll('.field-value-display').forEach(el => {
                el.style.display = EditState.isEditing ? 'none' : 'block';
            });
            document.querySelectorAll('.field-value-edit').forEach(el => {
                el.style.display = EditState.isEditing ? 'block' : 'none';
            });
            document.querySelectorAll('.reset-field-btn').forEach(el => {
                el.style.display = EditState.isEditing ? 'inline-block' : 'none';
            });

            // Toggle button containers
            document.getElementById('edit-mode-off').style.display = EditState.isEditing ? 'none' : 'block';
            document.getElementById('edit-mode-on').style.display = EditState.isEditing ? 'block' : 'none';
        }

        const FieldValidators = {
            name: (val) => {
                if (val.length < 2) return 'Name must be at least 2 characters';
                if (val.length > 200) return 'Name must be less than 200 characters';
                return null;
            },
            address: (val) => {
                if (val.length < 5) return 'Address must be at least 5 characters';
                if (val.length > 500) return 'Address must be less than 500 characters';
                return null;
            },
            phone: (val) => {
                if (val && val.length > 50) return 'Phone must be less than 50 characters';
                if (val && !/^[0-9+\-() ]+$/.test(val)) return 'Phone contains invalid characters';
                return null;
            },
            website: (val) => {
                if (!val) return null;
                const trimmed = val.trim();
                if (trimmed.length > 500) return 'Website must be less than 500 characters';
                try {
                    const parsed = new URL(trimmed);
                    if (!/^https?:$/.test(parsed.protocol)) {
                        return 'Website must start with http:// or https://';
                    }
                } catch (err) {
                    return 'Website must be a valid URL (include http:// or https://)';
                }
                return null;
            },
            lat: (val) => {
                const num = parseFloat(val);
                if (isNaN(num)) return 'Latitude must be a number';
                if (num < -90 || num > 90) return 'Latitude must be between -90 and 90';
                return null;
            },
            lng: (val) => {
                const num = parseFloat(val);
                if (isNaN(num)) return 'Longitude must be a number';
                if (num < -180 || num > 180) return 'Longitude must be between -180 and 180';
                return null;
            },
            path: (val) => {
                if (!val || val.length < 1) return 'Path cannot be empty';
                if (val.length > 255) return 'Path must be less than 255 characters';
                if (!isValidPathValue(val)) return 'Path can only contain letters, numbers, hyphens, underscores, and pipes';
                return null;
            },
            description: (val) => {
                if (val && val.length > 5000) return 'Description must be less than 5000 characters';
                return null;
            },
            hours_note: (val) => {
                if (val && val.length > 500) return 'Hours note must be less than 500 characters';
                return null;
            },
            open_hours: (val) => {
                const lines = val.split('\n').filter(l => l.trim());
                if (lines.length > 20) return 'Too many hours entries (max 20)';
                for (let line of lines) {
                    if (line.length > 200) return 'Individual hours entry too long (max 200 chars)';
                }
                return null;
            },
            type: () => null,
            'vegan-status': (val) => {
                if (!val) return 'Vegan status is required';
                const normalized = val.toLowerCase();
                if (!['veg-options', 'vegan', 'vegetarian'].includes(normalized)) {
                    return 'Invalid vegan status selection';
                }
                return null;
            },
            category: () => null
        };

        function validateField(field) {
            let input, errorSpan;
            if (field === 'lat') {
                input = document.getElementById('lat-input');
                errorSpan = document.getElementById('latlng-error');
            } else if (field === 'lng') {
                input = document.getElementById('lng-input');
                errorSpan = document.getElementById('latlng-error');
            } else {
                input = document.getElementById(field + '-input');
                errorSpan = document.getElementById(field + '-error');
            }

            const validator = FieldValidators[field];

            if (validator && input) {
                const errorMsg = validator(input.value);
                if (errorMsg) {
                    if (errorSpan) {
                        errorSpan.textContent = errorMsg;
                        errorSpan.style.display = 'block';
                    }
                    input.classList.add('invalid');
                    return false;
                } else {
                    if (errorSpan) {
                        errorSpan.textContent = '';
                        errorSpan.style.display = 'none';
                    }
                    input.classList.remove('invalid');
                    return true;
                }
            }
            return true;
        }

        async function saveDraft() {
            // Validate all fields
            let isValid = true;
            EditState.fields.forEach(field => {
                if (!validateField(field)) isValid = false;
            });

            if (!isValid) {
                alert('Please fix validation errors before saving');
                return;
            }

            // Collect modified fields
            const draftData = {};
            EditState.fields.forEach(field => {
                let input;
                if (field === 'lat') {
                    input = document.getElementById('lat-input');
                } else if (field === 'lng') {
                    input = document.getElementById('lng-input');
                } else {
                    input = document.getElementById(field + '-input');
                }

                if (input) {
                    const originalValue = EditState.originalData[field]?.value || '';
                    let currentValue = input.value;
                    let originalComparable = originalValue;

                    if (field === 'website' || field === 'path' || field === 'name' || field === 'address' || field === 'phone' || field === 'description') {
                        currentValue = currentValue.trim();
                        originalComparable = originalComparable.trim();
                    }

                    // Special handling for open_hours (textarea with lines)
                    if (field === 'open_hours') {
                        const lines = currentValue.split('\n').filter(l => l.trim());
                        const normalizedCurrent = lines.join('\n').trim();
                        const normalizedOriginal = originalValue.trim();
                        if (normalizedCurrent !== normalizedOriginal) {
                            draftData[field] = {
                                value: lines,
                                original_source: EditState.originalData[field]?.source || 'user'
                            };
                        }
                    } else if (field === 'lat' || field === 'lng') {
                        currentValue = parseFloat(currentValue);
                        if (currentValue !== parseFloat(originalValue)) {
                            draftData[field] = {
                                value: currentValue,
                                original_source: EditState.originalData[field]?.source || 'user'
                            };
                        }
                    } else if (field === 'vegan-status') {
                        if (currentValue === originalComparable) {
                            return;
                        }
                        // Convert vegan status to vegan + vegonly fields
                        const veganStatusValue = currentValue;
                        let vegan, vegonly;

                        if (veganStatusValue === 'vegan') {
                            vegan = 1; vegonly = 1;
                        } else if (veganStatusValue === 'vegetarian') {
                            vegan = 0; vegonly = 1;
                        } else { // 'veg-options'
                            vegan = 0; vegonly = 0;
                        }

                        // Save both fields to draft
                        draftData['vegan'] = {
                            value: vegan,
                            original_source: EditState.originalData[field]?.source || 'user'
                        };
                        draftData['vegonly'] = {
                            value: vegonly,
                            original_source: EditState.originalData[field]?.source || 'user'
                        };
                    } else if (field === 'type' || field === 'category') {
                        currentValue = parseInt(currentValue);
                        if (currentValue !== parseInt(originalComparable)) {
                            draftData[field] = {
                                value: currentValue,
                                original_source: EditState.originalData[field]?.source || 'user'
                            };
                        }
                    } else {
                        if (currentValue !== originalComparable) {
                            draftData[field] = {
                                value: currentValue,
                                original_source: EditState.originalData[field]?.source || 'user'
                            };
                        }
                    }
                }
            });

            // Save to backend
            try {
                const response = await fetch(basePath + 'venues/' + EditState.venueID + '/draft', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify(draftData)
                });

                // Read response as text first
                const responseText = await response.text();

                // Try to parse as JSON
                let result;
                try {
                    result = JSON.parse(responseText);
                } catch (parseErr) {
                    throw new Error('Server returned non-JSON response: ' + responseText);
                }

                if (result.success) {
                    document.getElementById('draft-status').textContent = '✓ Draft saved at ' + new Date().toLocaleTimeString();
                    EditState.hasUnsavedChanges = false;

                    // Update display values with draft data
                    EditState.updateDisplayWithDraft(draftData);

                    // Switch back to view mode
                    if (EditState.isEditing) {
                        toggleEditMode();
                    }
                } else {
                    // Handle validation errors
                    if (result.errors) {
                        let errorMsg = 'Validation errors:\n';
                        for (let field in result.errors) {
                            errorMsg += '- ' + field + ': ' + result.errors[field] + '\n';
                        }
                        alert(errorMsg);
                    } else {
                        alert('Failed to save draft: ' + (result.message || 'Unknown error'));
                    }
                }
            } catch (err) {
                console.error('Draft save error:', err);
                alert('Error saving draft: ' + err.message);
            }
        }

        function cancelEdit() {
            if (EditState.hasUnsavedChanges) {
                if (!confirm('You have unsaved changes. Are you sure you want to cancel?')) {
                    return;
                }
            }

            // Reset fields to original
            EditState.fields.forEach(field => {
                let input;
                if (field === 'lat') {
                    input = document.getElementById('lat-input');
                } else if (field === 'lng') {
                    input = document.getElementById('lng-input');
                } else {
                    input = document.getElementById(field + '-input');
                }

                if (input && EditState.originalData[field]) {
                    input.value = EditState.originalData[field].value;
                }
            });

            toggleEditMode();
            EditState.hasUnsavedChanges = false;
        }

        function resetField(field) {
            let input, source;
            if (field === 'latlng') {
                // Special case: reset both lat and lng
                const latInput = document.getElementById('lat-input');
                const lngInput = document.getElementById('lng-input');
                if (latInput && EditState.originalData.lat) {
                    latInput.value = EditState.originalData.lat.value;
                }
                if (lngInput && EditState.originalData.lng) {
                    lngInput.value = EditState.originalData.lng.value;
                }
                source = document.getElementById('latlng-source');
                if (source && EditState.originalData.lat) {
                    source.textContent = 'source: ' + EditState.originalData.lat.source;
                }
            } else {
                input = document.getElementById(field + '-input');
                source = document.getElementById(field + '-source');

                if (input && EditState.originalData[field]) {
                    input.value = EditState.originalData[field].value;
                    if (source) {
                        source.textContent = 'source: ' + EditState.originalData[field].source;
                    }
                }
            }

            validateField(field);
            EditState.hasUnsavedChanges = true;
        }

        // Warn on page leave with unsaved changes
        window.addEventListener('beforeunload', (e) => {
            if (EditState.hasUnsavedChanges && EditState.isEditing) {
                e.preventDefault();
                e.returnValue = '';
            }
        });

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', () => {
            const pathInput = document.getElementById('path-input');
            if (pathInput) {
                pathInput.setAttribute('pattern', PATH_VALUE_PATTERN);
            }
            {{if eq $state 0}}EditState.init();{{end}}
        });
    </script>
</body>
</html>
