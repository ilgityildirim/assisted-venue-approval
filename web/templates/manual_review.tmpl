<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <base href="{{basePath}}">
    <title>Pending Manual Review - HappyCow Validation</title>
    {{template "global_header_style" .}}
    <style>
        .page-intro { margin-bottom: 24px; }
        .page-intro h1 { font-size: 28px; font-weight: 600; color: #1f2933; margin-bottom: 6px; }
        .page-intro p { color: #6b7b8a; font-size: 14px; }
        .filters { background: #ffffff; padding: 20px; border-radius: 12px; margin-bottom: 28px; box-shadow: 0 6px 20px rgba(15, 23, 42, 0.05); }
        .filters form { display: flex; gap: 15px; align-items: center; flex-wrap: wrap; }
        .filters input, .filters select { padding: 10px 14px; border: 1px solid #d9e2ec; border-radius: 8px; font-size: 14px; }
        .filters label { font-size: 13px; font-weight: 600; color: #3e4c59; display: inline-flex; align-items: center; gap: 6px; }
        .btn { display: inline-flex; align-items: center; gap: 6px; padding: 9px 16px; background: #2c7be5; color: white; text-decoration: none; border-radius: 8px; border: none; cursor: pointer; font-weight: 600; font-size: 14px; }
        .btn:hover { filter: brightness(0.95); }
        .btn-secondary { background: #e4e7eb; color: #1f2933; }
        .btn-success { background: #1f8a4c; color: #fff; }
        .btn-danger { background: #d64545; color: #fff; }
        .btn-sm { padding: 4px 8px; font-size: 12px; border-radius: 6px; }
        .batch-controls { margin-bottom: 20px; padding: 16px; border-radius: 12px; background: #fef3c7; border: 1px solid #fcd34d; display: none; }
        .selected-count { font-weight: 600; color: #8a6d1f; }
        .results-card { display: none; background: #ffffff; padding: 20px; border-radius: 12px; box-shadow: 0 10px 24px rgba(15, 23, 42, 0.05); margin-bottom: 28px; }
        .batch-results-summary { padding: 15px; background: #ecf3ff; border-radius: 10px; margin-bottom: 15px; font-weight: 600; color: #1f2933; }
        .batch-results-list { list-style: none; padding: 0; margin: 0; display: flex; flex-direction: column; gap: 10px; }
        .batch-results-list li { padding: 10px 14px; border-radius: 10px; border-left: 4px solid #d9e2ec; background: #f8fafc; color: #3e4c59; }
        .batch-results-list li.success { border-left-color: #1f8a4c; background: #e6f4ea; }
        .batch-results-list li.failed { border-left-color: #d64545; background: #fdecea; }
        .list-section { background: white; border-radius: 12px; box-shadow: 0 10px 24px rgba(15, 23, 42, 0.05); overflow: hidden; }
        .list-section h2 { font-size: 20px; font-weight: 600; color: #1f2933; padding: 20px 24px; border-bottom: 1px solid #e0e6ed; }
        .table { width: 100%; border-collapse: collapse; }
        .table thead th { background: #f8fafc; font-weight: 600; font-size: 12px; text-transform: uppercase; letter-spacing: 0.08em; color: #6b7b8a; padding: 14px 16px; position: sticky; top: 0; z-index: 5; }
        .table tbody td { padding: 14px 16px; border-bottom: 1px solid #e0e6ed; font-size: 14px; color: #3e4c59; background: #fff; }
        .score-badge { padding: 4px 8px; border-radius: 999px; font-weight: 600; font-size: 12px; }
        .score-high { background: #e6f4ea; color: #1f8a4c; }
        .score-medium { background: #fff5d1; color: #8a6d1f; }
        .score-low { background: #fdecea; color: #d64545; }
        .actions-column { white-space: nowrap; display: flex; gap: 8px; }
        .pagination { display: flex; justify-content: center; gap: 10px; margin: 24px 0 0; }
        .pagination a { padding: 8px 16px; background: #fff; border: 1px solid #d9e2ec; color: #1f2933; text-decoration: none; border-radius: 8px; font-weight: 500; }
        .pagination a.active { background: #2c7be5; color: white; border-color: #2c7be5; }
        @media (max-width: 768px) {
            .table { font-size: 13px; }
            .filters form { flex-direction: column; align-items: stretch; }
        }
    </style>
</head>
<body class="layout-shell">
    {{template "global_header" .}}
    <div class="layout-content" style="max-width: 1400px;">
        <header class="page-intro">
            <h1>üïµÔ∏è New Venues ‚Äî Review</h1>
            <p>Focus on submissions that still require a manual decision. Batch approve, reject, or re-run AI with confidence.</p>
        </header>

        <div class="filters">
            <form method="GET" id="filter-form">
                <input type="text" name="search" value="{{.Search}}" placeholder="Search...">
                <label>
                    <input type="checkbox" name="high_scores_only" value="true" {{if .HighScoresOnly}}checked{{end}}>
                    Show only high scores (‚â• {{.ApprovalThreshold}})
                </label>
                <label>
                    <input type="checkbox" name="trusted_only" value="true" {{if .TrustedOnly}}checked{{end}}>
                    Show only trusted users
                </label>
                <select name="sort" id="sort-select" onchange="document.getElementById('filter-form').submit();">
                    <option value="created_at" {{if eq .Sort "created_at"}}selected{{end}}>Sort by: Created (Oldest)</option>
                    <option value="last_updated" {{if eq .Sort "last_updated"}}selected{{end}}>Sort by: Updated (Newest)</option>
                    <option value="venue_id_asc" {{if eq .Sort "venue_id_asc"}}selected{{end}}>Sort by: Venue ID (Asc)</option>
                    <option value="venue_id_desc" {{if eq .Sort "venue_id_desc"}}selected{{end}}>Sort by: Venue ID (Desc)</option>
                    <option value="score_desc" {{if eq .Sort "score_desc"}}selected{{end}}>Sort by: Score (High‚ÜíLow)</option>
                    <option value="score_asc" {{if eq .Sort "score_asc"}}selected{{end}}>Sort by: Score (Low‚ÜíHigh)</option>
                </select>
                <button type="submit" class="btn">Filter</button>
                <a href="{{basePath}}venues/manual-review" class="btn btn-secondary">Clear</a>
            </form>
        </div>

        <div class="batch-controls" id="batch-controls" style="display:none;">
            <div class="selected-count" id="selected-count">0 venues selected</div>
            <div style="margin-top: 10px; display: flex; gap: 10px; flex-wrap: wrap; align-items: center;">
                <button id="start-ai-btn" class="btn btn-success" onclick="startAIForSelected()" disabled>üöÄ Start AI-Assisted Review for selected (0) venues</button>
                <button class="btn btn-success" onclick="batchApprove()">‚úÖ Approve Selected</button>
                <button class="btn btn-danger" onclick="batchReject()">‚ùå Reject Selected</button>
                <button class="btn" onclick="selectAll()">Select All</button>
                <button class="btn" onclick="selectNone()">Select None</button>
            </div>
        </div>

        <section class="results-card" id="batch-results">
            <h2 style="font-size: 20px; font-weight: 600; color: #1f2933; margin-bottom: 12px;">Batch Operation Results</h2>
            <div id="batch-results-content"></div>
        </section>

        <section class="list-section">
            <h2>Venues ({{.Total}} {{if .HighScoresOnly}}matching filter{{else}}total{{end}} ‚Ä¢ Page {{.Page}} of {{.TotalPages}})</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th><input type="checkbox" id="select-all" onchange="toggleSelectAll()"></th>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Location</th>
                        <th>Submitter</th>
                        <th>Authority</th>
                        <th>Score</th>
                        <th>Created At</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {{range .Items}}
                    <tr>
                        <td><input type="checkbox" class="venue-checkbox" value="{{.VenueWithUser.Venue.ID}}" onclick="updateBatchControls()"></td>
                        <td>{{.VenueWithUser.Venue.ID}}</td>
                        <td><strong>{{.VenueWithUser.Venue.Name}}</strong></td>
                        <td>{{.VenueWithUser.Venue.Location}}</td>
                        <td>{{.VenueWithUser.User.Username}}</td>
                        <td>
                            {{if .VenueWithUser.User.Trusted}}<span class="score-badge score-high" style="background:#e6f4ea; color:#1f8a4c;">Trusted</span>{{end}}
                            {{if .VenueWithUser.IsVenueAdmin}}<span class="score-badge" style="background:#e0f2fe; color:#1d4ed8;">Owner</span>{{end}}
                            {{if .VenueWithUser.AmbassadorLevel}}<span class="score-badge" style="background:#f8f0ff; color:#7c3aed;">Ambassador</span>{{end}}
                            {{if not (or .VenueWithUser.User.Trusted .VenueWithUser.IsVenueAdmin .VenueWithUser.AmbassadorLevel)}}<span class="score-badge score-medium" style="background:#f1f5f9; color:#3e4c59;">Regular</span>{{end}}
                        </td>
                        <td>
                            {{if ge .Score 85}}
                                <span class="score-badge score-high">{{.Score}}</span>
                            {{else if ge .Score 50}}
                                <span class="score-badge score-medium">{{.Score}}</span>
                            {{else}}
                                <span class="score-badge score-low">{{.Score}}</span>
                            {{end}}
                        </td>
                        <td>
                            {{if .VenueWithUser.Venue.CreatedAt}}
                                {{.VenueWithUser.Venue.CreatedAt.Format "2006-01-02 15:04"}}
                            {{else}}
                                <span style="color:#999;">N/A</span>
                            {{end}}
                        </td>
                        <td class="actions-column">
                            <a href="{{basePath}}venues/{{.VenueWithUser.Venue.ID}}" class="btn btn-sm">View details</a>
                        </td>
                    </tr>
                    {{end}}
                </tbody>
            </table>
        </section>

        <div class="pagination">
            {{if gt .Page 1}}
                <a href="{{basePath}}venues/manual-review?page={{add .Page -1}}&search={{.Search}}{{if .HighScoresOnly}}&high_scores_only=true{{end}}{{if .TrustedOnly}}&trusted_only=true{{end}}&sort={{.Sort}}">¬´ Previous</a>
            {{end}}
            {{range $i := seq 1 .TotalPages}}
                {{if eq $i $.Page}}
                    <a href="#" class="active">{{$i}}</a>
                {{else if or (le $i 3) (ge $i (add $.TotalPages -2)) (and (ge $i (add $.Page -1)) (le $i (add $.Page 1))) }}
                    <a href="{{basePath}}venues/manual-review?page={{$i}}&search={{$.Search}}{{if $.HighScoresOnly}}&high_scores_only=true{{end}}{{if $.TrustedOnly}}&trusted_only=true{{end}}&sort={{$.Sort}}">{{$i}}</a>
                {{end}}
            {{end}}
            {{if lt .Page .TotalPages}}
                <a href="{{basePath}}venues/manual-review?page={{add .Page 1}}&search={{.Search}}{{if .HighScoresOnly}}&high_scores_only=true{{end}}{{if .TrustedOnly}}&trusted_only=true{{end}}&sort={{.Sort}}">Next ¬ª</a>
            {{end}}
        </div>
    </div>

    <script>
        const basePath = '{{basePath}}';
        function updateBatchControls() {
            const count = document.querySelectorAll('.venue-checkbox:checked').length;
            const controls = document.getElementById('batch-controls');
            const countEl = document.getElementById('selected-count');
            const startBtn = document.getElementById('start-ai-btn');
            const plural = count === 1 ? '' : 's';
            controls.style.display = count > 0 ? 'block' : 'none';
            countEl.textContent = count + ' venue' + plural + ' selected';
            if (startBtn) {
                startBtn.disabled = count === 0;
                startBtn.textContent = 'üöÄ Start AI-Assisted Review for selected (' + count + ') venue' + plural;
            }
        }
        function toggleSelectAll() {
            const checked = document.getElementById('select-all').checked;
            document.querySelectorAll('.venue-checkbox').forEach(cb => cb.checked = checked);
            updateBatchControls();
        }
        function selectAll() { document.querySelectorAll('.venue-checkbox').forEach(cb => cb.checked = true); document.getElementById('select-all').checked = true; updateBatchControls(); }
        function selectNone() { document.querySelectorAll('.venue-checkbox').forEach(cb => cb.checked = false); document.getElementById('select-all').checked = false; updateBatchControls(); }

        function getSelectedIds() {
            return Array.from(document.querySelectorAll('.venue-checkbox:checked')).map(cb => cb.value);
        }
        async function startAIForSelected() {
            const ids = getSelectedIds();
            if (ids.length === 0) return;
            if (!confirm('Start AI-Assisted Review for ' + ids.length + ' selected venue' + (ids.length === 1 ? '' : 's') + '?')) {
                return;
            }
            const btn = document.getElementById('start-ai-btn');
            btn.disabled = true;
            btn.textContent = '‚è≥ Queuing ' + ids.length + '...';
            try {
                const resp = await fetch(basePath + 'validate/batch', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ venue_ids: ids.map(id => parseInt(id, 10)), force: true })
                });
                if (!resp.ok) {
                    throw new Error('Request failed with status ' + resp.status);
                }
                const data = await resp.json().catch(() => ({}));
                const queued = typeof data.queued === 'number' ? data.queued : 0;
                if (data.status === 'skipped' || queued === 0) {
                    alert('Nothing queued: ' + (data.reason || 'already processed or invalid IDs'));
                } else {
                    alert('Queued ' + queued + ' venue' + (queued === 1 ? '' : 's') + ' for AI-Assisted Review.');
                }
            } catch (e) {
                console.error(e);
                alert('Failed to start AI-Assisted Reviews.');
                btn.disabled = false;
                updateBatchControls();
                return;
            }
            setTimeout(() => { window.location.reload(); }, 800);
        }
        function batchApprove() {
            const ids = getSelectedIds();
            if (ids.length === 0) return;
            if (!confirm('Approve ' + ids.length + ' selected venue' + (ids.length === 1 ? '' : 's') + '?')) return;
            batchOperation('approve', ids, 'Batch approval by admin');
        }
        function batchReject() {
            const ids = getSelectedIds();
            if (ids.length === 0) return;
            const reason = prompt('Enter rejection reason (required):');
            if (!reason || reason.trim() === '') {
                alert('Rejection reason is required');
                return;
            }
            batchOperation('reject', ids, reason);
        }
        function batchOperation(action, ids, reason) {
            const formData = new FormData();
            formData.append('action', action);
            formData.append('venue_ids', ids.join(','));
            formData.append('reason', reason);

            fetch(basePath + 'venues/batch-operation', { method: 'POST', body: formData })
                .then(r => r.json())
                .then(data => {
                    if (data.results && data.results.length > 0) {
                        displayBatchResults(data, action);
                        selectNone();
                        setTimeout(() => location.reload(), 5000);
                    } else {
                        alert('No venues processed');
                    }
                })
                .catch(e => {
                    console.error(e);
                    alert('Error performing batch ' + action);
                });
        }

        function displayBatchResults(data, action) {
            const resultsSection = document.getElementById('batch-results');
            const resultsContent = document.getElementById('batch-results-content');

            let html = '<div class="batch-results-summary">';
            html += 'Batch ' + action + ' completed: ' + data.success_count + '/' + data.total_count + ' successful';
            html += '</div>';

            html += '<ul class="batch-results-list">';
            data.results.forEach((result, index) => {
                const num = index + 1;
                const name = result.venue_name || 'Unknown';
                const vid = result.venue_id;
                const status = result.status;
                const cssClass = result.success ? 'success' : 'failed';
                const reasonText = result.reason ? ' (Reason: ' + result.reason + ')' : '';

                html += '<li class="' + cssClass + '">';
                html += '<strong>' + num + '.</strong> ' + name + ' (<strong>' + vid + '</strong>) - Status: <strong>' + status + '</strong>' + reasonText;
                html += '</li>';
            });
            html += '</ul>';

            resultsContent.innerHTML = html;
            resultsSection.style.display = 'block';
            resultsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
        function approveVenue(id) {
            if (!confirm('Approve this venue?')) return;
            const fd = new FormData(); fd.append('notes', 'Manual approval');
            fetch(basePath + 'venues/' + id + '/approve', { method: 'POST', body: fd })
                .then(r => r.ok ? location.reload() : alert('Error approving'))
                .catch(() => alert('Error approving'));
        }
        function rejectVenue(id) {
            const reason = prompt('Enter rejection reason (required):');
            if (!reason || reason.trim() === '') {
                alert('Rejection reason is required');
                return;
            }
            const fd = new FormData(); fd.append('reason', reason);
            fetch(basePath + 'venues/' + id + '/reject', { method: 'POST', body: fd })
                .then(r => r.ok ? location.reload() : alert('Error rejecting'))
                .catch(() => alert('Error rejecting'));
        }
    </script>
</body>
</html>
