<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pending Venues - HappyCow Validation</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #f5f7fa; }
        .container { max-width: 1400px; margin: 0 auto; padding: 20px; }
        .header { background: #2c3e50; color: white; padding: 20px 0; margin-bottom: 30px; }
        .header h1 { text-align: center; font-size: 2.5em; }
        .nav { display: flex; gap: 20px; margin-bottom: 30px; }
        .nav a { padding: 10px 20px; background: white; color: #2c3e50; text-decoration: none; border-radius: 5px; }
        .nav a.active, .nav a:hover { background: #3498db; color: white; }
        .filters { background: white; padding: 20px; border-radius: 8px; margin-bottom: 30px; }
        .filters form { display: flex; gap: 15px; align-items: center; flex-wrap: wrap; }
        .filters input, .filters select { padding: 8px 12px; border: 1px solid #ddd; border-radius: 4px; }
        .btn { display: inline-block; padding: 8px 16px; background: #3498db; color: white; text-decoration: none; border-radius: 4px; border: none; cursor: pointer; }
        .btn:hover { background: #2980b9; }
        .btn-sm { padding: 4px 8px; font-size: 12px; }
        .btn-success { background: #27ae60; }
        .btn-danger { background: #e74c3c; }
        .btn-warning { background: #f39c12; }
        .section { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .table { width: 100%; border-collapse: collapse; }
        .table th, .table td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
        .table th { background: #f8f9fa; font-weight: 600; position: sticky; top: 0; }
        .venue-row { cursor: pointer; }
        .venue-row:hover { background: #f8f9fa; }
        .venue-details { display: none; background: #f8f9fa; }
        .venue-details.expanded { display: table-row; }
        .status-badge { padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: bold; }
        .status-approved { background: #d4edda; color: #155724; }
        .status-rejected { background: #f8d7da; color: #721c24; }
        .status-pending { background: #fff3cd; color: #856404; }
        .pagination { display: flex; justify-content: center; gap: 10px; margin-top: 20px; }
        .pagination a { padding: 8px 12px; background: white; border: 1px solid #ddd; color: #333; text-decoration: none; }
        .pagination a.active { background: #3498db; color: white; }
        .batch-controls { margin-bottom: 20px; padding: 15px; background: #fff3cd; border-radius: 5px; }
        .selected-count { font-weight: bold; color: #856404; }
        .checkbox { margin-right: 10px; }
        .actions-column { white-space: nowrap; }
        @media (max-width: 768px) {
            .table { font-size: 14px; }
            .filters form { flex-direction: column; align-items: stretch; }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="container">
            <h1>üìã Pending Venues</h1>
        </div>
    </div>
    
    <div class="container">
        <nav class="nav">
            <a href="/">Dashboard</a>
            <a href="/venues/pending" class="active">Pending Venues</a>
            <a href="/validation/history">History</a>
            <a href="/analytics">Analytics</a>
        </nav>
        
        <div class="filters">
            <form method="GET">
                <input type="text" name="search" value="{{.Search}}" placeholder="Search venues...">
                <select name="status">
                    <option value="">All Status</option>
                    <option value="pending" {{if eq .Status "pending"}}selected{{end}}>Pending</option>
                    <option value="approved" {{if eq .Status "approved"}}selected{{end}}>Approved</option>
                    <option value="rejected" {{if eq .Status "rejected"}}selected{{end}}>Rejected</option>
                    <option value="manual_review" {{if eq .Status "manual_review"}}selected{{end}}>Manual Review</option>
                </select>
                <button type="submit" class="btn">Filter</button>
                <a href="/venues/pending" class="btn">Clear</a>
            </form>
        </div>
        
        <div class="batch-controls" id="batch-controls" style="display: none;">
            <div class="selected-count" id="selected-count">0 venues selected</div>
            <div style="margin-top: 10px;">
                <button class="btn btn-success" onclick="batchApprove()">‚úÖ Approve Selected</button>
                <button class="btn btn-danger" onclick="batchReject()">‚ùå Reject Selected</button>
                <button class="btn btn-warning" onclick="batchManualReview()">üëÄ Manual Review</button>
                <button class="btn" onclick="selectAll()">Select All</button>
                <button class="btn" onclick="selectNone()">Select None</button>
            </div>
        </div>
        
        <div class="section">
            <h2>Venues ({{.Total}} total, Page {{.Page}} of {{.TotalPages}})</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th><input type="checkbox" id="select-all" onchange="toggleSelectAll()"></th>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Location</th>
                        <th>Submitter</th>
                        <th>Authority</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {{range .Venues}}
                    <tr class="venue-row" onclick="toggleVenueDetails({{.Venue.ID}})">
                        <td><input type="checkbox" class="venue-checkbox" value="{{.Venue.ID}}" onclick="event.stopPropagation(); updateBatchControls()"></td>
                        <td>{{.Venue.ID}}</td>
                        <td><strong>{{.Venue.Name}}</strong></td>
                        <td>{{.Venue.Location}}</td>
                        <td>{{.User.Username}}</td>
                        <td>
                            {{if .User.Trusted}}<span title="Trusted User">‚úÖ</span>{{end}}
                            {{if .IsVenueAdmin}}<span title="Venue Owner">üëë</span>{{end}}
                            {{if .AmbassadorLevel}}<span title="Ambassador">üåü</span>{{end}}
                        </td>
                        <td>
                            {{if eq (intVal .Venue.Active 0) 1}}
                                <span class="status-badge status-approved">Approved</span>
                            {{else if eq (intVal .Venue.Active 0) -1}}
                                <span class="status-badge status-rejected">Rejected</span>
                            {{else}}
                                <span class="status-badge status-pending">Pending</span>
                            {{end}}
                        </td>
                        <td class="actions-column">
                            <a href="/venues/{{.Venue.ID}}" class="btn btn-sm" onclick="event.stopPropagation()">View</a>
                            <button class="btn btn-success btn-sm" onclick="event.stopPropagation(); approveVenue({{.Venue.ID}})">‚úÖ</button>
                            <button class="btn btn-danger btn-sm" onclick="event.stopPropagation(); rejectVenue({{.Venue.ID}})">‚ùå</button>
                        </td>
                    </tr>
                    <tr class="venue-details" id="details-{{.Venue.ID}}">
                        <td colspan="8">
                            <div style="padding: 15px;">
                                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                                    <div><strong>Phone:</strong> {{if .Venue.Phone}}{{.Venue.Phone}}{{else}}N/A{{end}}</div>
                                    <div><strong>Website:</strong> {{if .Venue.URL}}<a href="{{.Venue.URL}}" target="_blank">{{.Venue.URL}}</a>{{else}}N/A{{end}}</div>
                                    <div><strong>Vegan Level:</strong> {{.Venue.Vegan}}/{{.Venue.VegOnly}}</div>
                                    <div><strong>Created:</strong> {{.Venue.CreatedAt.Format "2006-01-02"}}</div>
                                </div>
                                {{if .Venue.AdditionalInfo}}
                                    <div style="margin-top: 10px;"><strong>Description:</strong></div>
                                    <div style="background: #f8f9fa; padding: 10px; border-radius: 4px; margin-top: 5px;">{{.Venue.AdditionalInfo}}</div>
                                {{end}}
                            </div>
                        </td>
                    </tr>
                    {{end}}
                </tbody>
            </table>
        </div>
        
        <div class="pagination">
            {{if gt .Page 1}}
                <a href="?page={{add .Page -1}}&status={{.Status}}&search={{.Search}}">¬´ Previous</a>
            {{end}}
            
            {{range $i := seq 1 .TotalPages}}
                {{if eq $i $.Page}}
                    <a href="#" class="active">{{$i}}</a>
                {{else if or (le $i 3) (ge $i (add $.TotalPages -2)) (and (ge $i (add $.Page -1)) (le $i (add $.Page 1)))}}
                    <a href="?page={{$i}}&status={{$.Status}}&search={{$.Search}}">{{$i}}</a>
                {{end}}
            {{end}}
            
            {{if lt .Page .TotalPages}}
                <a href="?page={{add .Page 1}}&status={{.Status}}&search={{.Search}}">Next ¬ª</a>
            {{end}}
        </div>
    </div>
    
    <script>
        function toggleVenueDetails(venueId) {
            const details = document.getElementById('details-' + venueId);
            details.classList.toggle('expanded');
        }
        
        function updateBatchControls() {
            const checkboxes = document.querySelectorAll('.venue-checkbox:checked');
            const count = checkboxes.length;
            const controls = document.getElementById('batch-controls');
            const countElement = document.getElementById('selected-count');
            
            if (count > 0) {
                controls.style.display = 'block';
                countElement.textContent = count + ' venue' + (count === 1 ? '' : 's') + ' selected';
            } else {
                controls.style.display = 'none';
            }
        }
        
        function toggleSelectAll() {
            const selectAll = document.getElementById('select-all');
            const checkboxes = document.querySelectorAll('.venue-checkbox');
            
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAll.checked;
            });
            
            updateBatchControls();
        }
        
        function selectAll() {
            document.querySelectorAll('.venue-checkbox').forEach(cb => cb.checked = true);
            updateBatchControls();
        }
        
        function selectNone() {
            document.querySelectorAll('.venue-checkbox').forEach(cb => cb.checked = false);
            document.getElementById('select-all').checked = false;
            updateBatchControls();
        }
        
        function getSelectedIds() {
            const checkboxes = document.querySelectorAll('.venue-checkbox:checked');
            return Array.from(checkboxes).map(cb => cb.value);
        }
        
        function batchApprove() {
            const ids = getSelectedIds();
            if (ids.length === 0) return;
            
            const reason = prompt('Reason for batch approval (optional):') || 'Batch approval';
            batchOperation('approve', ids, reason);
        }
        
        function batchReject() {
            const ids = getSelectedIds();
            if (ids.length === 0) return;
            
            const reason = prompt('Reason for batch rejection:');
            if (!reason) return;
            
            batchOperation('reject', ids, reason);
        }
        
        function batchManualReview() {
            const ids = getSelectedIds();
            if (ids.length === 0) return;
            
            const reason = prompt('Reason for manual review (optional):') || 'Requires manual review';
            batchOperation('manual_review', ids, reason);
        }
        
        function batchOperation(action, ids, reason) {
            const formData = new FormData();
            formData.append('action', action);
            formData.append('venue_ids', ids.join(','));
            formData.append('reason', reason);
            
            fetch('/batch-operation', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                alert(data.action + ' completed: ' + data.success_count + '/' + data.total_count + ' venues processed');
                location.reload();
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error performing batch operation');
            });
        }
        
        function approveVenue(id) {
            if (confirm('Approve this venue?')) {
                const reason = prompt('Reason (optional):') || 'Manual approval';
                updateVenueStatus(id, 'approve', reason);
            }
        }
        
        function rejectVenue(id) {
            const reason = prompt('Reason for rejection:');
            if (reason) {
                updateVenueStatus(id, 'reject', reason);
            }
        }
        
        function updateVenueStatus(id, action, reason) {
            const formData = new FormData();
            formData.append(action === 'approve' ? 'notes' : 'reason', reason);
            
            const url = '/venues/' + id + '/' + action;
            
            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                // Update the row without full page reload
                location.reload();
            })
            .catch(error => {
                console.error('Error:', error);
                location.reload();
            });
        }
    </script>
</body>
</html>